{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, push, ref, get, child, remove, update } from \"firebase/database\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut } from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nconst firebaseConfig = {\n  databaseURL: 'https://kanban-brd-default-rtdb.firebaseio.com/',\n  apiKey: \"AIzaSyAnbTHf5pbc8du7zHhnGPSkLkVLFcgWSlA\",\n  authDomain: \"kanban-brd.firebaseapp.com\",\n  projectId: \"kanban-brd\",\n  storageBucket: \"kanban-brd.appspot.com\",\n  messagingSenderId: \"42814942618\",\n  appId: \"1:42814942618:web:f44f4b8a8d5be72e679e23\"\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\nconst dbRef = ref(getDatabase());\nfunction creatUser({\n  email,\n  password\n}) {\n  return createUserWithEmailAndPassword(auth, email, password);\n}\nfunction logInUser({\n  email,\n  password\n}) {\n  return signInWithEmailAndPassword(auth, email, password);\n}\nfunction signOutUser() {\n  return signOut(auth);\n}\nasync function getData({\n  userID,\n  category\n}) {\n  return await get(child(dbRef, `users/${userID}/${category}/`));\n}\nfunction addNewColumn({\n  userID,\n  column\n}) {\n  return push(ref(db, `users/${userID}/columns/`), {\n    /// push for lists && set fot other cases\n    column\n  });\n}\nfunction deleteColumn({\n  userID,\n  id\n}) {\n  return remove(ref(db, `users/${userID}/columns/${id}`));\n}\nfunction updateColumn({\n  userID,\n  id,\n  column\n}) {\n  return update(ref(db, `users/${userID}/columns/${id}`), {\n    column\n  });\n}\nfunction addNewTask({\n  userID,\n  task = 'task',\n  columnID\n}) {\n  return push(ref(db, `users/${userID}/tasks/`), {\n    task: task,\n    columnID: columnID\n  });\n}\nfunction deleteTask({\n  userID,\n  id\n}) {\n  return remove(ref(db, `users/${userID}/tasks/${id}`));\n}\nfunction updateTaskDB({\n  userID,\n  taskID,\n  task,\n  columnID\n}) {\n  return update(ref(db, `users/${userID}/tasks/${taskID}`), {\n    task: task,\n    columnID: columnID\n  });\n}\nexport { db, auth, creatUser, logInUser, signOutUser, getData, addNewColumn, deleteColumn, updateColumn, addNewTask, deleteTask, updateTaskDB };","map":{"version":3,"names":["initializeApp","getDatabase","push","ref","get","child","remove","update","getAuth","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","firebaseConfig","databaseURL","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","db","auth","dbRef","creatUser","email","password","logInUser","signOutUser","getData","userID","category","addNewColumn","column","deleteColumn","id","updateColumn","addNewTask","task","columnID","deleteTask","updateTaskDB","taskID"],"sources":["/Users/a1/projects/with mentor practice/kanban-board/src/api/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getDatabase, push, ref, get, child, remove, update} from \"firebase/database\";\nimport {getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut} from \"firebase/auth\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nconst firebaseConfig = {\n  databaseURL: 'https://kanban-brd-default-rtdb.firebaseio.com/',\n  apiKey: \"AIzaSyAnbTHf5pbc8du7zHhnGPSkLkVLFcgWSlA\",\n  authDomain: \"kanban-brd.firebaseapp.com\",\n  projectId: \"kanban-brd\",\n  storageBucket: \"kanban-brd.appspot.com\",\n  messagingSenderId: \"42814942618\",\n  appId: \"1:42814942618:web:f44f4b8a8d5be72e679e23\"\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\nconst dbRef = ref(getDatabase());\n\nfunction creatUser({email, password}) {\n  return createUserWithEmailAndPassword(auth, email, password)\n}\n\nfunction logInUser({email, password}) {\n  return signInWithEmailAndPassword(auth, email, password)\n}\n\nfunction signOutUser() {\n  return signOut(auth)\n}\n\nasync function getData({userID, category}) {\n  return await get(child(dbRef, `users/${userID}/${category}/`))\n}\n\nfunction addNewColumn({userID, column}) {\n  return push(ref(db, `users/${userID}/columns/`), { /// push for lists && set fot other cases\n    column,\n  })\n}\nfunction deleteColumn({userID, id}) {\n  return remove(ref(db, `users/${userID}/columns/${id}`))\n}\nfunction updateColumn({userID,id, column}) {\n  return update(ref(db, `users/${userID}/columns/${id}`), {\n    column,\n  })\n}\n\nfunction addNewTask({userID, task='task', columnID}) {\n  return push(ref(db, `users/${userID}/tasks/`), {\n    task: task,\n    columnID: columnID,\n  })\n}\nfunction deleteTask({userID, id}) {\n  return remove(ref(db, `users/${userID}/tasks/${id}`))\n}\nfunction updateTaskDB({userID, taskID, task, columnID}) {\n  return update(ref(db, `users/${userID}/tasks/${taskID}`), { \n    task: task,\n    columnID: columnID,\n  })\n}\n\nexport {\n  db,\n  auth,\n  creatUser,\n  logInUser,\n  signOutUser,\n  getData,\n  addNewColumn,\n  deleteColumn,\n  updateColumn,\n  addNewTask,\n  deleteTask,\n  updateTaskDB\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}