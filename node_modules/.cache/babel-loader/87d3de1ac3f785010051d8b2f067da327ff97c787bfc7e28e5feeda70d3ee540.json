{"ast":null,"code":"var _jsxFileName = \"/Users/a1/projects/with mentor practice/kanban-board/src/components/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useMemo, useState } from 'react';\nimport '../blocks/app/app.css';\nimport Header from './Header';\nimport Button from './Button';\nimport Column from './Column';\nimport Footer from './Footer';\nimport Popup from './Popup';\nimport { DndContext, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport { SortableContext, arrayMove } from '@dnd-kit/sortable';\nimport { logIn, logOut, selectUser } from '../context/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { creatUser, logInUser, signOutUser, getData, addNewColumn, deleteColumn, updateColumn } from '../api/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const dispatch = useDispatch();\n  const auth = getAuth();\n  let {\n    user,\n    id\n  } = useSelector(selectUser); //initially check isAnyUserLogIN\n\n  const [columns, setColumns] = useState(getInitialData({\n    id,\n    user\n  }));\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('kanban-board-tasks')) || []);\n  const [isOpen, setIsOpen] = useState(false); /// popup\n  const [isOpenLogIn, setIsOpenLogIn] = useState(false);\n  const [isOpenNewAccount, setIsOpenNewAccount] = useState(false);\n  function handleClickAddColumn() {\n    if (user) {\n      addNewColumnDB({\n        userID: id\n      });\n    } else {\n      setColumns([...columns, {\n        name: 'Column ' + (columns.length + 1),\n        id: Math.ceil(Math.random() * 100000)\n      }]);\n      addNewColumnLS({\n        str: 'kanban-board-columns',\n        state: columns\n      });\n    }\n  }\n  function handleClickDeleteColumn({\n    columnID,\n    userID\n  }) {\n    if (!user) {\n      const filteredColumns = columns.filter(el => el.id !== columnID);\n      const filteredTasks = tasks.filter(task => task.idColumn !== columnID);\n      setColumns(filteredColumns);\n      setTasks(filteredTasks);\n    } else {\n      deleteColumn({\n        userID: userID,\n        id: columnID\n      }).then(() => {\n        return getInitialDataDB({\n          id: userID,\n          str: 'columns'\n        });\n      }).then(data => {\n        setColumns(data);\n      }).catch();\n    }\n  }\n  let updateColumnName = ({\n    userID,\n    id,\n    input\n  }) => {\n    if (!user) {\n      const update = columns.map(el => {\n        if (el.id !== id) return el;\n        return {\n          ...el,\n          name: input\n        };\n      });\n      setColumns(update);\n    } else {\n      updateColumn({\n        userID: userID,\n        id: id,\n        column: input\n      }).then(() => {\n        return getInitialDataDB({\n          id: userID,\n          str: 'columns'\n        });\n      }).then(data => {\n        setColumns(data);\n      }).catch();\n    }\n  };\n  let handleAddTask = ({\n    columnID\n  }) => {\n    if (!user) {\n      const newTask = {\n        idColumn: columnID,\n        id: Math.ceil(Math.random() * 100000),\n        content: 'Task ' + (tasks.length + 1)\n      };\n      setTasks([...tasks, newTask]);\n    } else {}\n  };\n  let handleDeleteTask = id => {\n    const filteredTasks = tasks.filter(task => task.id !== id);\n    setTasks(filteredTasks);\n  };\n  let updateTask = ({\n    id,\n    input\n  }) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id !== id) return task;\n      return {\n        ...task,\n        content: input\n      };\n    });\n    setTasks(updatedTasks);\n  };\n\n  /// dnd-kit \n\n  const columnsID = useMemo(() => {\n    console.log(columns);\n    return columns.map(el => el.id);\n  }, [columns]);\n  const [activeColumn, setActiveColumn] = useState(null);\n  const [activeTask, setActiveTask] = useState(null);\n  //managing the area from where dnd starts to work, just move for this 'distance', to provide work other buttons\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 3\n    }\n  }));\n  function onDragStart(event) {\n    var _event$active$data$cu, _event$active$data$cu2;\n    if (((_event$active$data$cu = event.active.data.current) === null || _event$active$data$cu === void 0 ? void 0 : _event$active$data$cu.type) === 'column') {\n      setActiveColumn(event.active.data.current.id);\n      return;\n    }\n    if (((_event$active$data$cu2 = event.active.data.current) === null || _event$active$data$cu2 === void 0 ? void 0 : _event$active$data$cu2.type) === 'task') {\n      setActiveTask(event.active.data.current.task);\n      return;\n    }\n  }\n  function onDragEnd(event) {\n    setActiveTask(null);\n    setActiveColumn(null);\n    const {\n      active,\n      over\n    } = event; /// {active, over}\n\n    if (!over) return;\n    const activeId = active.id; /// active\n    const overId = over.id;\n    if (activeId === overId) return;\n    setColumns(columns => {\n      const draggindColumn = columns.findIndex(el => el.id === activeId);\n      const overColumn = columns.findIndex(el => el.id === overId);\n      return arrayMove(columns, draggindColumn, overColumn);\n    });\n  }\n  function onDragOver(event) {\n    const {\n      active,\n      over\n    } = event; /// {active, over}\n\n    if (!over) return;\n    const activeId = active.id; /// active\n    const overId = over.id;\n    if (activeId === overId) return;\n    if (!activeTask) return;\n    const isActiveTask = active.data.current.type === 'task';\n    const isOverTask = over.data.current.type === 'task';\n    /// dropping a task over another task\n    if (isActiveTask && isOverTask) {\n      setTasks(tasks => {\n        const activeIndex = tasks.findIndex(el => el.id === activeId);\n        const overIndex = tasks.findIndex(el => el.id === overId);\n        tasks[activeIndex].idColumn = tasks[overIndex].idColumn;\n        return arrayMove(tasks, activeIndex, overIndex);\n      });\n    }\n    /// dropping a task over am ampty other column\n    const isOverColumn = over.data.current.type === 'column';\n    setActiveColumn(null);\n    if (isActiveTask && isOverColumn) {\n      setTasks(tasks => {\n        const activeIndex = tasks.findIndex(el => el.id === activeId);\n        tasks[activeIndex].idColumn = overId;\n        return arrayMove(tasks, activeIndex, activeIndex);\n      });\n    }\n  }\n  /// dnd-kit end\n\n  useEffect(() => {\n    if (!user) localStorage.setItem('kanban-board-columns', JSON.stringify(columns));\n  }, [columns, user]);\n  useEffect(() => {\n    if (!user) localStorage.setItem('kanban-board-tasks', JSON.stringify(tasks));\n  }, [tasks, user]);\n  useEffect(() => {\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        const uid = user.uid;\n        const email = user.email;\n        dispatch(logIn({\n          email: email,\n          id: uid\n        }));\n        getInitialDataDB({\n          id: uid,\n          str: 'columns'\n        }).then(res => setColumns(res));\n      } else {\n        // User is signed out\n        setColumns(getInitialDataLS('kanban-board-columns'));\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DndContext, {\n    onDragStart: onDragStart,\n    onDragEnd: onDragEnd,\n    onDragOver: onDragOver,\n    sensors: sensors,\n    children: [user ? /*#__PURE__*/_jsxDEV(Header, {\n      handleLogOut: handleLogOut\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }, this) : /*#__PURE__*/_jsxDEV(Popup, {\n      handleLogIn: handleLogIn,\n      handleCreatNewAccount: handleCreatNewAccount,\n      handleOpenClick: handleOpenClick,\n      handleCloseCLick: handleCloseCLick,\n      isOpen: isOpen,\n      isOpenLogIn: isOpenLogIn,\n      isOpenNewAccount: isOpenNewAccount,\n      handleOpenFormLogIn: handleOpenFormLogIn,\n      handleOpenFormNewAccount: handleOpenFormNewAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 56\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(SortableContext, {\n        items: columnsID,\n        children: columns.map(el => {\n          return /*#__PURE__*/_jsxDEV(Column, {\n            columnID: el.id,\n            name: el.name,\n            handleClick: handleClickDeleteColumn,\n            updateColumnName: updateColumnName,\n            handleAddTask: handleAddTask,\n            tasks: tasks.filter(task => task.idColumn === el.id),\n            handleDeleteTask: handleDeleteTask,\n            updateTask: updateTask\n          }, el.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        content: \"Add column\",\n        handleClick: () => {\n          handleClickAddColumn();\n        },\n        type: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), \" \", activeColumn ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), \" \", /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 5\n  }, this);\n  function handleCreatNewAccount({\n    email,\n    password\n  }) {\n    creatUser({\n      email,\n      password\n    }).then(user => {\n      console.log(user);\n      setIsOpenLogIn(true);\n      setIsOpenNewAccount(false);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n  function handleLogIn({\n    email,\n    password\n  }) {\n    logInUser({\n      email,\n      password\n    }).then(user => {\n      // setColumns([])\n      setIsOpenLogIn(false);\n      setIsOpen(false);\n      if (user.user) {\n        localStorage.setItem('kanban-token', JSON.stringify(user.user.accessToken));\n        dispatch(logIn({\n          email: email,\n          id: user.user.uid\n        }));\n      }\n    }).catch(err => {\n      console.log('catch', err);\n    });\n  }\n  function handleLogOut() {\n    signOutUser().then(() => {\n      // setColumns([])\n      dispatch(logOut());\n      localStorage.removeItem('kanban-token');\n    }).catch();\n  }\n  function handleOpenClick() {\n    setIsOpen(true);\n  }\n  function handleCloseCLick() {\n    setIsOpen(false);\n    setIsOpenLogIn(false);\n    setIsOpenNewAccount(false);\n  }\n  function handleOpenFormLogIn(e) {\n    e.preventDefault();\n    setIsOpenNewAccount(false);\n    setIsOpenLogIn(true);\n  }\n  function handleOpenFormNewAccount(e) {\n    e.preventDefault();\n    setIsOpenLogIn(false);\n    setIsOpenNewAccount(true);\n  }\n  function getInitialData({\n    id,\n    user\n  }) {\n    if (user) {\n      return getInitialDataDB({\n        id: id,\n        str: 'columns'\n      }).then(res => res);\n    } else {\n      // User is signed out\n      return getInitialDataLS('kanban-board-columns');\n    }\n  }\n  async function getInitialDataDB({\n    id,\n    str\n  }) {\n    /// 'columns'  'tasks'\n    console.log('????', id, str);\n    return await getData({\n      userID: id,\n      category: str\n    }).then(snapshot => {\n      if (snapshot.exists()) {\n        const data = Object.entries(snapshot.val()).map(el => [el[0], Object.values(el[1])[0]]);\n        let data2 = [];\n        for (let i of data) {\n          data2.push({\n            id: i[0],\n            name: i[1]\n          });\n        }\n        return data2;\n      } else {\n        console.log(\"No data available\", columns);\n        return [];\n      }\n    }).catch();\n  }\n  function getInitialDataLS(str) {\n    /// 'kanban-board-columns' 'kanban-board-tasks'\n    return JSON.parse(localStorage.getItem(str)) || [];\n  }\n  async function addNewColumnDB({\n    userID,\n    column = 'column'\n  }) {\n    await addNewColumn({\n      userID,\n      column\n    }).then(snapshot => {\n      if (snapshot.key) {\n        let data = getInitialDataDB({\n          id: userID,\n          str: 'columns'\n        }).then(res => res);\n        return data;\n      } else {\n        console.log(\"No snapshot in addNewColumnDB\");\n      }\n    }).then(res => setColumns(res)).catch();\n  }\n  function addNewColumnLS({\n    str,\n    state\n  }) {\n    /// 'kanban-board-columns' 'kanban-board-tasks', columns or tasks\n    localStorage.setItem(str, JSON.stringify(state));\n  }\n}\n_s(App, \"e8wKlx9fYR9z+2M1F82C5GwCgiQ=\", false, function () {\n  return [useDispatch, useSelector, useSensors, useSensor];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useMemo","useState","Header","Button","Column","Footer","Popup","DndContext","PointerSensor","useSensor","useSensors","SortableContext","arrayMove","logIn","logOut","selectUser","useDispatch","useSelector","getAuth","onAuthStateChanged","creatUser","logInUser","signOutUser","getData","addNewColumn","deleteColumn","updateColumn","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","dispatch","auth","user","id","columns","setColumns","getInitialData","tasks","setTasks","JSON","parse","localStorage","getItem","isOpen","setIsOpen","isOpenLogIn","setIsOpenLogIn","isOpenNewAccount","setIsOpenNewAccount","handleClickAddColumn","addNewColumnDB","userID","name","length","Math","ceil","random","addNewColumnLS","str","state","handleClickDeleteColumn","columnID","filteredColumns","filter","el","filteredTasks","task","idColumn","then","getInitialDataDB","data","catch","updateColumnName","input","update","map","column","handleAddTask","newTask","content","handleDeleteTask","updateTask","updatedTasks","columnsID","console","log","activeColumn","setActiveColumn","activeTask","setActiveTask","sensors","activationConstraint","distance","onDragStart","event","_event$active$data$cu","_event$active$data$cu2","active","current","type","onDragEnd","over","activeId","overId","draggindColumn","findIndex","overColumn","onDragOver","isActiveTask","isOverTask","activeIndex","overIndex","isOverColumn","setItem","stringify","uid","email","res","getInitialDataLS","children","handleLogOut","fileName","_jsxFileName","lineNumber","columnNumber","handleLogIn","handleCreatNewAccount","handleOpenClick","handleCloseCLick","handleOpenFormLogIn","handleOpenFormNewAccount","className","items","handleClick","password","err","accessToken","removeItem","e","preventDefault","category","snapshot","exists","Object","entries","val","values","data2","i","push","key","_c","$RefreshReg$"],"sources":["/Users/a1/projects/with mentor practice/kanban-board/src/components/App.js"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport '../blocks/app/app.css';\nimport Header from './Header';\nimport Button from './Button';\nimport Column from './Column';\nimport Footer from './Footer';\nimport Popup from './Popup';\nimport { DndContext, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport {SortableContext, arrayMove} from '@dnd-kit/sortable';\n\nimport { logIn, logOut, selectUser } from '../context/user';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport { creatUser, logInUser, signOutUser, getData, addNewColumn, deleteColumn, updateColumn } from '../api/firebase';\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const auth = getAuth();\n\n  let {user,id}= useSelector(selectUser); //initially check isAnyUserLogIN\n\n  const [columns, setColumns] = useState(getInitialData({id, user}));\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('kanban-board-tasks')) || []);\n\n  const [isOpen, setIsOpen] = useState(false); /// popup\n  const [isOpenLogIn, setIsOpenLogIn] = useState(false);\n  const [isOpenNewAccount, setIsOpenNewAccount] = useState(false);\n\n  function handleClickAddColumn() {\n    if (user) {\n      addNewColumnDB({userID:id})\n    } else {\n      setColumns([...columns, {name: 'Column ' + (columns.length + 1), id: Math.ceil(Math.random()*100000)} ])\n      addNewColumnLS({str:'kanban-board-columns', state:columns})\n    }\n  }\n\n  function handleClickDeleteColumn({columnID, userID}) {\n    if (!user) {\n      const filteredColumns = columns.filter( el => el.id !== columnID)\n      const filteredTasks = tasks.filter(task => task.idColumn !== columnID)\n      setColumns(filteredColumns)\n      setTasks(filteredTasks)\n    } else {\n      deleteColumn({userID:userID, id:columnID})\n      .then(() => {\n        return getInitialDataDB({id:userID, str:'columns'})\n      })\n      .then((data) => {\n        setColumns(data)\n      })\n      .catch()\n    }\n  }\n\n  let updateColumnName = ({userID, id, input}) => {\n    if (!user) {\n      const update = columns.map(el => {\n        if (el.id !== id)  return el\n        return {...el, name:input}\n      })\n      setColumns(update)\n    } else {\n      updateColumn({userID:userID, id:id, column:input})\n      .then(() => {\n        return getInitialDataDB({id:userID, str:'columns'})\n      })\n      .then((data) => {\n        setColumns(data)\n      })\n      .catch()\n    }\n  }\n\n  let handleAddTask = ({columnID}) => {\n    if (!user) {\n      const newTask = {\n        idColumn: columnID,\n        id: Math.ceil(Math.random()*100000),\n        content: 'Task ' + (tasks.length + 1),\n      }\n      setTasks([...tasks, newTask])\n    } else {\n\n    }\n  }\n\n  let handleDeleteTask = (id) => {\n    const filteredTasks = tasks.filter(task => task.id !== id)\n    setTasks(filteredTasks)\n  }\n\n  let updateTask = ({id, input}) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id !== id) return task\n      return {...task, content:input}\n    })\n    setTasks(updatedTasks)\n  }\n\n  /// dnd-kit \n  \n  const columnsID = useMemo(() => {console.log(columns); return columns.map(el => el.id)}, [columns]);\n  const [activeColumn, setActiveColumn] = useState(null);\n  const [activeTask, setActiveTask] = useState(null);\n  //managing the area from where dnd starts to work, just move for this 'distance', to provide work other buttons\n  const sensors = useSensors(useSensor(PointerSensor, {\n    activationConstraint: {\n      distance: 3,\n    }\n  }));\n\n  function onDragStart(event) {\n    if (event.active.data.current?.type === 'column') {\n      setActiveColumn(event.active.data.current.id)\n      return\n    }\n    if (event.active.data.current?.type === 'task') {\n      setActiveTask(event.active.data.current.task)\n      return\n    }\n  }\n  function onDragEnd(event) {\n    setActiveTask(null)\n    setActiveColumn(null)\n\n    const {active,over} = event; /// {active, over}\n\n    if (!over) return\n    \n    const activeId = active.id;  /// active\n    const overId = over.id;\n\n    if ( activeId === overId) return\n\n    setColumns(columns => {\n      const draggindColumn = columns.findIndex(el => el.id === activeId)\n      const overColumn = columns.findIndex(el => el.id === overId)\n      return arrayMove(columns, draggindColumn, overColumn)\n    })\n  }\n  function onDragOver(event) {\n    const {active,over} = event; /// {active, over}\n\n    if (!over) return\n    \n    const activeId = active.id;  /// active\n    const overId = over.id;\n\n    if ( activeId === overId) return\n\n    if (!activeTask) return\n\n    const isActiveTask = active.data.current.type === 'task'\n    const isOverTask = over.data.current.type === 'task'\n    /// dropping a task over another task\n    if (isActiveTask && isOverTask) {\n      setTasks(tasks => {\n        const activeIndex = tasks.findIndex(el => el.id === activeId)\n        const overIndex = tasks.findIndex(el => el.id === overId)\n\n        tasks[activeIndex].idColumn = tasks[overIndex].idColumn\n\n        return arrayMove(tasks, activeIndex, overIndex)\n      })\n    }\n    /// dropping a task over am ampty other column\n    const isOverColumn = over.data.current.type === 'column';\n    setActiveColumn(null)\n\n    if (isActiveTask && isOverColumn) {\n      setTasks(tasks => {\n        const activeIndex = tasks.findIndex(el => el.id === activeId)\n\n        tasks[activeIndex].idColumn = overId\n\n        return arrayMove(tasks, activeIndex, activeIndex)\n      })\n    }\n  }\n  /// dnd-kit end\n\n\n  useEffect(() => {\n    if (!user) localStorage.setItem('kanban-board-columns', JSON.stringify(columns));\n  }, [columns, user])\n  useEffect(() => {\n    if (!user) localStorage.setItem('kanban-board-tasks', JSON.stringify(tasks));\n  }, [tasks, user])\n \n  useEffect(() => {\n    onAuthStateChanged(auth, (user) => {\n      if (user) {\n        const uid = user.uid;\n        const email = user.email;\n        dispatch(logIn({email:email,id:uid}))\n        getInitialDataDB({id:uid, str:'columns'}).then((res)=>setColumns(res))\n        \n      } else {   // User is signed out\n        setColumns(getInitialDataLS('kanban-board-columns'))\n      } \n    });\n  },[])\n\n  return (\n    <DndContext onDragStart={onDragStart} onDragEnd={onDragEnd} onDragOver={onDragOver} sensors={sensors}>\n\n      {user ? <Header handleLogOut={handleLogOut} /> : <Popup \n      handleLogIn={handleLogIn} \n      handleCreatNewAccount={handleCreatNewAccount} \n      handleOpenClick={handleOpenClick} \n      handleCloseCLick={handleCloseCLick} \n      isOpen={isOpen} \n      isOpenLogIn={isOpenLogIn} \n      isOpenNewAccount={isOpenNewAccount} \n      handleOpenFormLogIn={handleOpenFormLogIn} \n      handleOpenFormNewAccount={handleOpenFormNewAccount} />}\n\n      <div className=\"app\">\n        <SortableContext items={columnsID}>\n        {columns.map(el => {\n          return <Column\n            key={el.id}\n            columnID={el.id}\n            name={el.name}\n            handleClick={handleClickDeleteColumn}\n            updateColumnName={updateColumnName}\n            handleAddTask={handleAddTask}\n            tasks={tasks.filter(task => task.idColumn === el.id )}\n            handleDeleteTask={handleDeleteTask}\n            updateTask={updateTask}\n          />\n        })}\n        </SortableContext>\n        \n        <Button   \n          content='Add column'\n          handleClick={() => {handleClickAddColumn(); }}\n          type='add'\n        />\n\n      </div>\n      {/* patch */} {activeColumn ? <></> : <></>} {/* patch end */}\n      <Footer />\n    </DndContext>\n  );\n\n  function handleCreatNewAccount({email,password}) {\n    creatUser({email, password})\n    .then(user => {\n      console.log(user)\n      setIsOpenLogIn(true)\n      setIsOpenNewAccount(false)\n    })\n    .catch(err => {\n      console.log(err)\n    })\n  }\n  function handleLogIn({email,password}) {\n    logInUser({email, password})\n    .then(user => {\n      // setColumns([])\n      setIsOpenLogIn(false)\n      setIsOpen(false)\n      if (user.user) {\n        localStorage.setItem('kanban-token', JSON.stringify(user.user.accessToken))\n        dispatch(logIn({email:email,id:user.user.uid}))\n      }\n    })\n    .catch(err => {\n      console.log('catch', err)\n    })\n  }\n  function handleLogOut() {\n    signOutUser()\n    .then(() => {\n      // setColumns([])\n      dispatch(logOut());\n      localStorage.removeItem('kanban-token');\n    })\n    .catch()\n  }\n  function handleOpenClick() {\n    setIsOpen(true);\n  }\n  function handleCloseCLick() {\n    setIsOpen(false);\n    setIsOpenLogIn(false);\n    setIsOpenNewAccount(false);\n  }\n  function handleOpenFormLogIn(e) {\n    e.preventDefault();\n    setIsOpenNewAccount(false)\n    setIsOpenLogIn(true)\n  }\n  function handleOpenFormNewAccount(e) {\n    e.preventDefault();\n    setIsOpenLogIn(false)\n    setIsOpenNewAccount(true)\n  }\n\n  function getInitialData({id, user}) {\n    if (user) {\n      return getInitialDataDB({id:id, str:'columns'}).then((res)=> res)\n    } else {   // User is signed out\n      return getInitialDataLS('kanban-board-columns')\n    } \n  }\n  async function getInitialDataDB({id, str}) {  /// 'columns'  'tasks'\n    console.log('????', id, str)\n    return  await getData({userID:id, category:str})\n      .then(snapshot => {\n        if (snapshot.exists()) {\n          const data = Object.entries(snapshot.val()).map(el=> [el[0],Object.values(el[1])[0]])\n          let data2 =[]\n          for (let i of data) {\n            data2.push({id:i[0],name:i[1]})\n          }\n          return data2\n        } else {\n          console.log(\"No data available\", columns);\n          return []\n        }\n      })\n      .catch() \n  }\n  function getInitialDataLS(str) {  /// 'kanban-board-columns' 'kanban-board-tasks'\n    return (JSON.parse(localStorage.getItem(str)) || []);\n  }\n  async function addNewColumnDB({userID, column='column'}) {\n    await addNewColumn({userID, column})\n    .then(snapshot => {\n      if (snapshot.key) {\n        let data = getInitialDataDB({id:userID, str:'columns'}).then((res)=> res);\n        return data\n      } else {\n        console.log(\"No snapshot in addNewColumnDB\");\n      }\n    })\n    .then(res => setColumns(res))\n    .catch()\n  }\n\n  function addNewColumnLS({str, state} ) {  /// 'kanban-board-columns' 'kanban-board-tasks', columns or tasks\n    localStorage.setItem(str, JSON.stringify(state))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}